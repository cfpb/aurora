---
- name: Install all gocd dependencies
  yum:
    name: '{{ gocd_rpms }}'
    state: present
    disable_gpg_check: yes
  notify:
    - restart go-agent

# Does not work due to lack of SNI support in Python < 2.7.9
#- name: Get GoCD RPM
#  get_url:
#    url: "{{ gocd_agent_package_url }}"
#    dest: /tmp/
#    checksum: "sha1:{{ gocd_agent_checksum }}"
#    validate_certs: False

- name: Download GoCD Agent RPM
  shell: "curl -o {{ gocd_agent_package_path }}/{{ gocd_agent_package_name }} {{ gocd_agent_package_url }}"
  args:
    creates: "{{ gocd_agent_package_path }}/{{ gocd_agent_package_name }}"

- name: Download Create Jenkins key
  shell: "rpm --import https://jenkins-ci.org/redhat/jenkins-ci.org.key"
  args:
    creates: "/etc/yum.repos.d/jenkins.repo"

- name: Download Create Jenkins repo
  shell: "curl --silent --location {{jenkins_repo_url}} | sudo tee /etc/yum.repos.d/jenkins.repo"
  args:
    creates: "/etc/yum.repos.d/jenkins.repo"


- name: Install Jenkins server
  yum:
    name: "jenkins"
    state: latest
  register: jenkins
  notify:
    - restart jenkins

- name: Open required ports
  command: "iptables -I {{ iptables_chain }} 2 -m state --state NEW -p tcp --dport {{ item }} -j ACCEPT"
  with_items:
    - 8080
  when: iptables_config
  tags:
    - mesos
    - mesos-master

- name: Verify RPM checksum
  stat:
    checksum_algorithm: sha1
    path: "{{ gocd_agent_package_path }}/{{ gocd_agent_package_name }}"
    get_md5: False # We want SHA-1 only
  register: gocd_rpm

- name: Ensure the checksum maches expected value
  assert:
    that: "gocd_rpm.stat.checksum == '{{ gocd_agent_checksum }}'"

- name: Install GoCD Agent
  yum:
    name: "{{ gocd_agent_package_path }}/{{ gocd_agent_package_name }}"
    state: present
  when: not gocd_upgrade
  notify:
    - restart go-agent

- name: Upgrade GoCD Agent
  command: rpm -U "{{ gocd_agent_package_path }}/{{ gocd_agent_package_name }}"
  register: gocd_upgrade_result
  when: gocd_upgrade
  failed_when: gocd_upgrade_result.rc != 0 and "is already installed" not in gocd_upgrade_result.stderr
  notify:
    - restart go-agent

- name: Ensure working directory exists
  file:
    state: directory
    dest: "{{ gocd_agent_work_dir }}"
    owner: go
    group: go
    mode: 0755
  notify:
    - restart go-agent

- name: Replace go-agent file
  template:
    src: go-agent
    dest: /etc/default/go-agent
  notify:
    - restart go-agent

- name: Start go-agent
  service:
    name: go-agent
    state: started


# we should be logging to standard output
# - name: Set recursive admin permissions on log folders
#   acl:
#     path: "{{ item }}"
#     entity: "{{ restricted_group_name }}"
#     etype: group
#     permissions: rX
#     recursive: yes
#     state: present
#   with_items: "{{ gocd_log_file_locations }}"
#
# - name: Set default admin permissions on log folders
#   acl:
#     path: "{{ item }}"
#     entity: "{{ restricted_group_name }}"
#     etype: group
#     permissions: rX
#     default: yes
#     state: present
#   with_items: "{{ gocd_log_file_locations }}"
#
