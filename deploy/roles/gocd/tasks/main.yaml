---
- name: Install all dependencies
  yum:
    name: "{{item}}"
    state: present
    disable_gpg_check: yes
  with_items:
    - "{{ gocd_rpms }}"
  notify:
    - restart go-agent
  tags: gocd

- name: Download GoCD Server RPM
  shell: "curl -o {{ gocd_agent_package_path }}/{{ gocd_agent_package_name }} {{ gocd_agent_package_url }}"
  args:
    creates: "{{ gocd_agent_package_path }}/{{ gocd_agent_package_name }}"

#- name: Copy local to remote
#  copy: 
#    src: "{{ gocd_agent_package_url }}"
#    dest: "{{ gocd_agent_package_path }}/{{ gocd_agent_package_name }}"
#  tags: gocd

- name: Download GoCD Agent package
  get_url: 
    url: "{{ gocd_agent_package_url }}"
    dest: "{{ gocd_agent_package_path }}/{{ gocd_agent_package_name }}"
    validate_certs: False
  tags: gocd

- name: Verify RPM checksum
  stat:
    checksum_algorithm: sha1
    path: "{{ gocd_agent_package_path }}/{{ gocd_agent_package_name }}"
    get_md5: False # We want SHA-1 only
  register: gocd_rpm
  tags: gocd

- name: Ensure the checksum maches expected value
  assert:
    that: "gocd_rpm.stat.checksum == '{{ gocd_agent_checksum }}'"
  tags: gocd
  # FIX?!
  ignore_errors: yes

- name: Install GoCD Agent
  yum:
    name: "{{ gocd_agent_package_path }}/{{ gocd_agent_package_name }}"
    #name: "{{ gocd_agent_package_url }}"
    state: present
    disable_gpg_check: yes
  when: not gocd_upgrade
  notify:
    - restart go-agent
  tags: gocd

- name: Upgrade GoCD Agent
  command: rpm -U "{{ gocd_agent_package_path }}/{{ gocd_agent_package_name }}"
  register: gocd_upgrade_result
  when: gocd_upgrade
  failed_when: gocd_upgrade_result.rc != 0 and "is already installed" not in gocd_upgrade_result.stderr
  notify:
    - restart go-agent
  tags: gocd

- name: Ensure working directory exists
  file:
    state: directory
    dest: "{{ gocd_agent_work_dir }}"
    owner: go
    group: go
    mode: 0755
  notify:
    - restart go-agent
  tags: gocd

- name: Replace go-agent file
  template:
    src: go-agent
    dest: /etc/default/go-agent
  notify:
    - restart go-agent
  tags: gocd

- name: Start go-agent
  service:
    name: go-agent
    state: started
  tags: gocd

- name: Set recursive admin permissions on log folders
  acl:
    path: "{{ item }}"
    entity: "{{ restricted_group_name }}"
    etype: group
    permissions: rX
    recursive: yes
    state: present
  with_items: "{{ gocd_log_file_locations }}"
  tags: gocd

- name: Set default admin permissions on log folders
  acl:
    path: "{{ item }}"
    entity: "{{ restricted_group_name }}"
    etype: group
    permissions: rX
    default: yes
    state: present
  with_items: "{{ gocd_log_file_locations }}"
  tags: gocd

