---
- hosts: cdbc01
  name: Citus RealTime Analytics Test
  tasks:
    - name: Download users data (31.7MB)
#     shell: wget https://examples.citusdata.com/tutorial/users.csv -O /tmp/users.csv 
      get_url:
        url: https://examples.citusdata.com/tutorial/users.csv
        dest: /tmp/users.csv
        mode: 0755

    - name: Download events data (74.7MB)
#     shell: wget https://examples.citusdata.com/tutorial/events.csv -O /tmp/events.csv 
      get_url:
        url: https://examples.citusdata.com/tutorial/events.csv
        dest: /tmp/events.csv
        mode: 0755

    - name: "create table users"
      become: yes
      become_user: postgres
      become_method: sudo
      command: >
        psql -c "create table github_users(user_id bigint,url text,login text,avatar_url text,
        gravatar_id text,display_login text);"
      register: create_table_users_sql_results

    - name: create table events
      become: yes
      become_user: postgres
      become_method: sudo
      command: >
        psql -c "create table github_events(event_id bigint, event_type text, event_public boolean, 
        repo_id bigint, payload jsonb,repo jsonb,user_id bigint,org jsonb, created_at timestamp);"
      register:  create_table_events_sql_results

#   - name: printout query results
#     debug:
#       #msg: create_table_users_sql_results.stdout_lines
#       msg: "----------------------------------------"
#     with_nested: "{{ create_table_users_sql_results.stdout_lines }}"

    - name: create event index
      become: yes
      become_user: postgres
      become_metho: sudo
      command: psql -c "CREATE INDEX event_type_index ON github_events (event_type);"
     
    - name: create payload index
      become: yes
      become_user: postgres
      become_metho: sudo
      command: psql -c "CREATE INDEX payload_index ON github_events USING GIN (payload jsonb_path_ops);"

    - name: create distributed table users
      become: yes
      become_user: postgres
      become_metho: sudo
      command: psql -c "SELECT create_distributed_table('github_users', 'user_id');"
      register: create_dist_users_sql_results

#   - name: printout create dist table users query results
#     debug:
#       #msg: create_dist_users_sql_results.stdout_lines
#       msg: "----------------------------------------"
#     with_nested: "{{ create_dist_users_sql_results.stdout_lines }}"

    - name: create distributed table events
      become: yes
      become_user: postgres
      become_metho: sudo
      command: psql -c "SELECT create_distributed_table('github_events', 'user_id');"
      register: create_dist_events_sql_results

#   - name: printout create dist table events query results
#     debug:
#       #msg: create_dist_events_sql_results.stdout_lines
#       msg: "----------------------------------------"
#     with_nested: "{{ create_dist_events_sql_results.stdout_lines }}"

    - name: import user data
      become: yes
      become_user: postgres
      become_method: sudo
      command: >
        psql -c "\copy github_users from '/tmp/users.csv' with csv;"
#         psql -c "select 1;"

    - name: import events data
      become: yes
      become_user: postgres
      become_method: sudo
      command: >
        psql -c "\copy github_events from '/tmp/events.csv' with csv;"
#         psql -c "select 1;"

### Verification Queries
    - name: select counts on user data
      become: yes
      become_user: postgres
      become_method: sudo
      command: >
        psql -c "SELECT count(*) FROM github_users"
      register: select_counts_userdata_sql_results

    - name: printout select counts on users results
      debug:
        #msg: select_counts_userdata_sql_results.stdout_lines
        msg: "{{ item[2] }}"
      with_nested: "{{ select_counts_userdata_sql_results.stdout_lines }}"
    
    - name: analyze github push events
      become: yes
      become_user: postgres
      become_method: sudo
      command: >
        psql -c "
        SELECT date_trunc('minute', created_at) AS minute,
               sum((payload->>'distinct_size')::int) AS num_commits
        FROM github_events
        WHERE event_type = 'PushEvent'
        GROUP BY minute
        ORDER BY minute;"
      register: analyze_pushevents_sql_results

    - name: printout analyze push events results
      debug:
        #msg: analyze_pushevents_sql_results.stdout_lines
        msg: "----------------------------------------"
      with_nested: "{{ analyze_pushevents_sql_results.stdout_lines }}"

    - name: join users with events 
      become: yes
      become_user: postgres
      become_method: sudo
      command: >
        psql -c "
        SELECT login, count(*)
        FROM github_events ge
        JOIN github_users gu
        ON ge.user_id = gu.user_id
        WHERE event_type = 'CreateEvent' AND payload @> '{\"ref_type\": \"repository\"}'
        GROUP BY login
        ORDER BY count(*) DESC LIMIT 10;"
      register: join_userevents_sql_results

    - name: printout join users events results
      debug:
        #var: join_userevents-sql_results
        #msg: join_userevents_sql_results.stdout_lines
        msg: "----------------------------------------"
      with_nested: "{{ join_userevents_sql_results.stdout_lines }}"

    
    - name: run update query
      become: yes
      become_user: postgres
      become_method: sudo
      command: >
        psql -c "UPDATE github_users SET display_login = 'no1youknow' WHERE user_id = 24305673;"
      register: update_sql_results

    - name: printout update results
      debug:
        #msg: update_sql_results.stdout_lines
        msg: "----------------------------------------"
      with_nested: "{{ update_sql_results.stdout }}"

    - name: distributed shard query
      become: yes
      become_user: postgres
      become_method: sudo
      command: >
        psql -c "
        SELECT nodename, count(*)
        FROM pg_dist_shard_placement
        GROUP BY nodename;"
      register: distshard_sql_results

    - name: printout propagation results
      debug:
        #msg: distshard_sql_results.stdout_lines
        msg: "----------------------------------------"
      with_nested: "{{ distshard_sql_results.stdout_lines }}"

