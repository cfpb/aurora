---
# First shutdown the existing cluster.  This assumes that the Ansible variables
# have all been updated to the new version, and old_ppas_service_name points
# to the old running version.
- hosts: db_server
  become: yes
  become_method: sudo


- hosts: db_server
  become: yes
  become_method: sudo
  vars:
    pp_upgrade: True
  pre_tasks:
    - name: Execute pre-configuration scripts
      postgresql_exec:
        login_user: "{{ pp_superaccount }}"
        login_password: "{{ pp_superpassword }}"
        port: "{{ pp_serverport }}"
        db: "{{ item.db }}"
        script: "{{ item.script }}"
      with_items: "{{ pp_pre_scripts }}"
      always_run: true
      when: install_ppas and pp_pre_scripts is defined

    # TODO: Use line_in_file to allow trusted local connections

    - name: First ensure that the database processes are stopped
      service:
        name: "{{ item }}"
        state: stopped
      with_items: "{{ pp_old_services }}"
  roles:
    - role: postgresql-server
  post_tasks:

    - name: Ensure that auxillary services are stopped
      service:
        name: "{{ item }}"
        state: stopped
      with_items: "{{ pp_support_services }}"

    - name: Ensure that the new database process is started
      service:
        name: "{{ pp_servicename }}"
        state: started
        enabled: yes
      register: pg_db_started

    - name: Pause for the DB to go up
      pause:
        minutes: 2
      when: pg_db_started.changed

    - name: Drop the "edb" database
      postgresql_exec:
        login_user: "{{ pp_superaccount }}"
        login_password: "{{ pp_superpassword }}"
        login_host: localhost
        db: postgres
        script: "DROP DATABASE IF EXISTS edb;"
        port: "{{ pp_serverport }}"
        autocommit: yes

    - name: Create the "edb" database
      postgresql_exec:
        login_user: "{{ pp_superaccount }}"
        login_password: "{{ pp_superpassword }}"
        login_host: localhost
        db: postgres
        script: "CREATE DATABASE edb;"
        port: "{{ pp_serverport }}"
        autocommit: yes

    - name: Ensure that the new database process is stopped
      service:
        name: "{{ pp_servicename }}"
        state: stopped

    - name: Run pg_upgrade consistency check
      #become: yes
      #become_method: sudo
      #become_user: "{{ pp_serviceaccount }}"
      sudo: yes
      remote_user: "{{ pp_serviceaccount }}"
      command: >
               {{ pp_prefix }}/{{ pp_install_path }}/bin/pg_upgrade
                  --old-datadir {{ pp_old_datadir }}
                  --new-datadir {{ pp_datadir }}
                  --old-bindir {{ pp_prefix }}/{{ pp_old_install_path }}/bin
                  --new-bindir {{ pp_prefix }}/{{ pp_install_path }}/bin
                  --link
                  -U {{ pp_serviceaccount }}
                  --check
      environment:
        - PGPASSWORD: "{{ pp_superpassword }}"

    - name: Run pg_upgrade
      #become: yes
      #become_method: sudo
      #become_user: "{{ pp_serviceaccount }}"
      sudo: yes
      remote_user: "{{ pp_serviceaccount }}"
      command: >
               {{ pp_prefix }}/{{ pp_install_path }}/bin/pg_upgrade
                  --old-datadir {{ pp_old_datadir }}
                  --new-datadir {{ pp_datadir }}
                  --old-bindir {{ pp_prefix }}/{{ pp_old_install_path }}/bin
                  --new-bindir {{ pp_prefix }}/{{ pp_install_path }}/bin
                  --link
                  -U {{ pp_serviceaccount }}
      environment:
        - PGPASSWORD: "{{ pp_superpassword }}"

- hosts: db_server
  become: yes
  become_method: sudo
  roles:
    - role: postgresql-server-config
